/******* HEADERS *******/#include <stdlib.h>#include <math.h>#include <Carbon/Carbon.h>#include <SimulationControllerFramework/SCPlotParameters.h>#include <SimulationControllerFramework/SimulationController.h> #include <SCAllocate.h>#include <SCNR.h>/******* PLOTTING GLOBALS AND DEFINES *******/#define nColors 100double	simTime, runTime, plotTime, plotDuration, DT;double	cStarts[nColors], cStops[nColors];SCColorRangeType cTypes[nColors]; SCColor pColors[nColors];SCTimePlotParameters tpP; SCPlotParameters plP; SCBarPlotParameters bpP;SCAxisParameters axP; SCMultiLinesPlotParameters mlP; SCRangePlotParameters rpP; SCHistogramPlotParameters hpP; FILE	*theFile;SCFitPlotParameters fpP; SCSmoothPlotParameters smP; SCScatterPlotParameters scP;/******* DEFINES *******/#define nThreads	1#define nTheta		1000#define nMatrix		10#define nCell		100#define nTrace		10#define nBar		10#define nLines		3#define nCircle		5/*************************************************************************************** GLOBALS	***************************************************************************************/double	*x, *y, w, *theta, ct, st, *xNoise, *xBar, *xS, *xLines, *xCenter, *yCenter;double	*xSize, *matrixXMin, *matrixXMax, *matrixYMin, *matrixYMax;double	**J, *JVec, *vWrite, *vRead, xBall, yBall;int		historyCount;/*************************************************************************************** MODEL INITIALIZATION		SCSetMaxHistoryCount(N);***************************************************************************************/void * InitModel(){			plotDuration = 100.0;         DT = 0.1;         SCDoPlotInParallel(false);	SCOpenInDemoMode(false);         SCStartRunImmediatelyAfterInit(false);  	SCCallParameterActionOnAll();	simTime = -DT;         int nPoints=ceil(plotDuration/DT);	SCSetNStepsBetweenPlotting(ceil(nPoints/1000.0)); 	SCSetNStepsInFullPlot(nPoints);         SCDoRedrawBasedOnTimer(true); 	SCInitTimePlotParameters(&tpP);         SCInitPlotParameters(&plP);	SCInitBarPlotParameters(&bpP);         SCInitRangePlotParameters(&rpP);	SCInitAxis(&axP);         SCInitMultiLinesPlotParameters(&mlP);	SCColorRangeFromNames("black", "red", nColors, pColors, 1.0);        for (int iCR=0; iCR<nColors; iCR++)        {            cTypes[iCR] = SC_COLOR_RANGE_LTE_LT;            cStarts[iCR] = ((double) iCR)/(double) nColors;            cStops[iCR] = ((double) (iCR+1))/(double) nColors;        }	SCInitFitPlotParameters(&fpP); SCInitSmoothPlotParameters(&smP);	SCInitScatterPlotParameters(&scP);		int i, j, index;        	theta = Vector(nTheta);	x = Vector(nTheta);	y = Vector(nTheta);	xNoise = Vector(nTheta);	xBar = Vector(nBar);	xS = Vector(2);	xCenter = Vector(5);	yCenter = Vector(5);	xSize = Vector(5);	xCenter[0] = 0.75; yCenter[0] = 0.75; xSize[0] = 30.0;	xCenter[1] = 0.5; yCenter[1] = 0.7; xSize[1] = 10.0;	xCenter[2] = -0.6; yCenter[2] = -0.3; xSize[2] = 60.0;	xCenter[3] = 0.0; yCenter[3] = -0.75; xSize[3] = 20.0;	xCenter[4] = 0.4; yCenter[4] = -0.5; xSize[4] = 80.0;	xLines = Vector(nLines);	for (i=0; i<nLines; i++)            xLines[i] = (double) (i+1)*0.25*plotDuration;	for (i=0; i<nTheta; i++)            theta[i] = 2.0*pi*(double) i/(double) (nTheta-1);	matrixXMin = Vector(nMatrix*nMatrix);	matrixXMax = Vector(nMatrix*nMatrix);	matrixYMin = Vector(nMatrix*nMatrix);	matrixYMax = Vector(nMatrix*nMatrix);	J = Matrix(nMatrix, nMatrix);	JVec = Vector(nMatrix*nMatrix);        index = 0;        for (i=0; i<nMatrix; i++)        {            for (j=0; j<nMatrix; j++)            {                matrixXMin[index] =  j;                matrixXMax[index] =  j + 1.0;                matrixYMin[index] =  nMatrix - i - 1.0;                matrixYMax[index] =  nMatrix - i;                J[i][j] = Randx();                JVec[index] = J[i][j];                index++;            }        }	vWrite = Vector(10);	vRead = Vector(10);        return NULL;}/******* ARRANGE WINDOWS *******/void AddWindowDataForPlots(const char * plotName, void * modelData){    if (!strcmp(plotName, "twoAxisPlot"))        SCSetWindowData(plotName, 0.01, 0.67, 0.33, 0.33);    if (!strcmp(plotName, "fitPlot"))        SCSetWindowData(plotName, 0.01, 0.34, 0.33, 0.33);    if (!strcmp(plotName, "smoothPlot"))        SCSetWindowData(plotName, 0.01, 0.01, 0.33, 0.33);    if (!strcmp(plotName, "expressionPlot"))        SCSetWindowData(plotName, 0.34, 0.67, 0.33, 0.33);    if (!strcmp(plotName, "barPlot"))        SCSetWindowData(plotName, 0.34, 0.01, 0.33, 0.33);    if (!strcmp(plotName, "spikePlot"))        SCSetWindowData(plotName, 0.67, 0.67, 0.33, 0.33);    if (!strcmp(plotName, "offsetPlot"))        SCSetWindowData(plotName, 0.34, 0.34, 0.33, 0.33);    if (!strcmp(plotName, "scatterPlot"))        SCSetWindowData(plotName, 0.67, 0.34, 0.33, 0.33);    if (!strcmp(plotName, "rangePlot"))        SCSetWindowData(plotName, 0.67, 0.01, 0.33, 0.33);}/******* PLOTTING *******/void AddPlotsAndRegisterWatchedVariables(void * modelData){        SCAddWatchedTimeColumn("t", &plotTime, SC_KEEP_DURATION);    SCAddWatchedTimeColumn("ct", &ct, SC_KEEP_DURATION);    SCAddExpressionColumn("c2", "ct^2");    SCAddWatchedTimeColumn("yBall", &yBall, SC_KEEP_PLOT_POINT);    SCAddWatchedTimeColumn("xBall", &xBall, SC_KEEP_PLOT_POINT);    SCAddWatchedFixedSizeColumn("xBar", xBar, nBar);     SCAddWatchedTimeColumns("xS", xS, 2, SC_KEEP_DURATION);    SCAddManagedColumn("tList", true);    SCAddManagedColumn("cList", true);    SCAddStaticColumn("matrixXMin", matrixXMin, nMatrix*nMatrix);    SCAddStaticColumn("matrixXMax", matrixXMax, nMatrix*nMatrix);    SCAddStaticColumn("matrixYMin", matrixYMin, nMatrix*nMatrix);    SCAddStaticColumn("matrixYMax", matrixYMax, nMatrix*nMatrix);    SCAddWatchedFixedSizeColumn("J", JVec, nMatrix*nMatrix);        SCAddPlot("twoAxisPlot", false);    axP.isXAxis = false; axP.axisType = SC_AXIS_LINEAR; axP.min = -12.0; axP.max = 12.0;    axP.ticks = 0.0; axP.axisRatio = 1.0; axP.axisToAxisSpacing = 0.0;    SCAddAxisToPlot("twoAxisPlot", &axP);    SCColorFromName("black", &tpP.lineColor);    SCColorFromName("yellow", &tpP.markerColor);    tpP.lineType = SC_TIME_PLOTS_NO_LINE;    tpP.markerStyle = SC_POINT_STYLE_CIRCLE;    tpP.markerSize = 30;    tpP.lineWidth = 2.0;    tpP.yAxis = 0;    SCAddVarsToTimePlot("twoAxisPlot", "xBall", "yBall", &tpP);        SCAddPlot("expressionPlot", true);    axP.isXAxis = false; axP.label = "cos^2(theta)"; axP.axisType = SC_AXIS_LINEAR;    axP.min = 0.0; axP.max = 1.2; axP.ticks = 0.0; axP.axisRatio = 0.5;    axP.axisToAxisSpacing = 12.0;    SCAddAxisToPlot("expressionPlot", &axP);    SCColorFromName("blue", &tpP.lineColor);     tpP.lineType = SC_TIME_PLOTS_SAME_LINE;    tpP.markerStyle = SC_POINT_STYLE_EMPTY;    tpP.lineWidth = 2.0; tpP.yAxis = 0;    SCAddVarsToTimePlot("expressionPlot", "t", "ct", &tpP);    SCColorFromName("red", &tpP.lineColor);    tpP.yAxis = 1;    SCAddVarsToTimePlot("expressionPlot", "t", "c2", &tpP);        SCAddPlot("fitPlot", false); SCAddPlot("smoothPlot", false);        SCAddPlot("barPlot", true);    SCColorFromName("cyan", &bpP.barColor);    bpP.barsAreVertical = true;    SCAddVarsToBar("barPlot", "xBar", &bpP);        SCAddPlot("offsetPlot", false);    SCColorFromName("black", &tpP.lineColor);    tpP.yOffset = 2.2; tpP.lineWidth = 2.0;    SCAddVarsToTimePlot("offsetPlot", "t", "xS", &tpP);        SCAddPlot("spikePlot", true);    tpP.lineType = SC_TIME_PLOTS_NO_LINE;    tpP.markerStyle = SC_POINT_STYLE_CIRCLE;    SCColorFromName("black", &tpP.markerColor);    tpP.markerSize = 1;    tpP.yAxis = 0;    SCAddVarsToTimePlot("spikePlot", "tList", "cList", &tpP);    axP.isXAxis = false; axP.label = "count"; axP.axisType = SC_AXIS_LINEAR;    axP.min = 0.0; axP.max = 20.0; axP.ticks = 0.0; axP.axisRatio = 0.2;    axP.axisToAxisSpacing = 12.0;    SCAddAxisToPlot("spikePlot", &axP);    hpP.barType = SC_HISTOGRAM_BAR_SMOOTH; hpP.units = SC_HISTOGRAM_UNITS_COUNT;    SCColorFromName("cyan", &hpP.barColor); hpP.barsAreVertical = true;    hpP.spacingType = SC_HISTOGRAM_SPACING_MHO2_HO2;    hpP.spacing = 10.0; hpP.smoothValue = 1.0; hpP.yAxis = 1;    SCAddVarsToHistogram("spikePlot", "tList", &hpP);        SCAddPlot("scatterPlot", false);        SCAddPlot("rangePlot", true);    SCAddColorSchemeToPlot("rangePlot", "plotColors", nColors, cTypes, cStarts,                           cStops, pColors);    rpP.xRangeType = SC_RANGE_COLUMNS;    rpP.yRangeType = SC_RANGE_COLUMNS;    rpP.lineStyle = SC_LINE_STYLE_EMPTY;    SCAddVarsToRange("rangePlot", "matrixXMin", "matrixXMax", "matrixYMin",                      "matrixYMax", "J", "plotColors", &rpP);    }/*******  PLOT DATA *******/void SetPlotParameters(pStruct * pData, const char * plotName, void * modelData){    SCInitPStructWithSensibleValues(pData); SCTextCopy("", &pData->title);    pData->boxStyle = SC_BOX_AXIS; pData->isActive = true;    pData->doCropWithXMinMax = true; pData->doCropWithYMinMax = true;    if (!strcmp(plotName, "twoAxisPlot"))    {        SCTextCopy("theta", &pData->xLabel); SCTextCopy("cos(theta)", &pData->yLabel);        pData->xMin = 0.0; pData->xMax = 2.0*pi;        pData->yMin = -1.2; pData->yMax = 1.2;        pData->multiAxisStyle = SC_MULTIAXIS_JOIN_Y;    }    if (!strcmp(plotName, "expressionPlot"))    {        SCTextCopy("theta", &pData->xLabel); SCTextCopy("cos(theta)", &pData->yLabel);        pData->xMin = 0.0; pData->xMax = plotDuration;        pData->yMin = -1.2; pData->yMax = 1.2;        pData->multiAxisStyle = SC_MULTIAXIS_STACK_X_AND_Y;    }    if (!strcmp(plotName, "fitPlot"))    {        SCTextCopy("theta", &pData->xLabel); SCTextCopy("value", &pData->yLabel);        pData->xMin = 0.0; pData->xMax = 2.0*pi;        pData->yMin = -1.2; pData->yMax = 1.2;    }    if (!strcmp(plotName, "smoothPlot"))    {        SCTextCopy("theta", &pData->xLabel); SCTextCopy("smoothed value", &pData->yLabel);        pData->xMin = 0.0; pData->xMax = 2.0*pi;        pData->yMin = -1.2; pData->yMax = 1.2;    }    if (!strcmp(plotName, "barPlot"))    {        SCTextCopy("theta", &pData->xLabel); SCTextCopy("cos(theta)", &pData->yLabel);        pData->xMin = 0.0; pData->xMax = 2.0*pi;        pData->yMin = -1.2; pData->yMax = 1.2;    }    if (!strcmp(plotName, "spikePlot"))    {        SCTextCopy("t", &pData->xLabel); SCTextCopy("spikes", &pData->yLabel);        pData->xMin = 0.0; pData->xMax = plotDuration;        pData->yMin = 0.0; pData->yMax = nCell;        pData->multiAxisStyle = SC_MULTIAXIS_STACK_X_AND_Y;    }    if (!strcmp(plotName, "offsetPlot"))    {        SCTextCopy("t", &pData->xLabel); SCTextCopy("cos/sine", &pData->yLabel);        pData->xMin = 0.0; pData->xMax = plotDuration;        pData->yMin = -1.2; pData->yMax = 3.6;    }    if (!strcmp(plotName, "scatterPlot"))    {        SCTextCopy("x", &pData->xLabel); SCTextCopy("y", &pData->yLabel);        pData->xMin = -1.2; pData->xMax = 1.2;        pData->yMin = -1.2; pData->yMax = 1.2;    }    if (!strcmp(plotName, "rangePlot"))    {        SCTextCopy("", &pData->xLabel); SCTextCopy("", &pData->yLabel);        pData->xMin = 0.0; pData->xMax = nMatrix;        pData->yMin = 0.0; pData->yMax = nMatrix;        pData->doDrawXAxis = false; pData->doDrawYAxis = false;    }}/******* BUTTONS *******/void AddControllableButtons(void * modelData){    SCAddControllableButton("going", false, "Continuous", "One-Shot");    SCAddControllableButton("plotTwoAxis", false, "Plot Two Axis", "Plot Two Axis");    SCAddControllableButton("plotFit", false, "Plot Fit", "Plot Fit");    SCAddControllableButton("plotSmooth", false, "Plot Smooth", "Plot Smooth");    SCAddControllableButton("plotLines", false, "Plot Lines", "Plot Lines");    SCAddControllableButton("plotBar", false, "Plot Bar", "Plot Bar");    SCAddControllableButton("plotScatter", false, "Plot Scatter", "Plot Scatter");    SCAddControllableButton("plotRange", false, "Plot Range", "Plot Range");    SCAddControllableButton("file", false, "File Data", "File Data");    SCAddControllableButton("getData", false, "Copy Data", "Copy Data");}/******* BUTTON ACTION *******/void ButtonAction(const char * buttonName, bool buttonValue, void * modelData){    int		i, j, index;        if (!strcmp(buttonName, "plotTwoAxis"))	    {        SCClearMakeNowPlots("twoAxisPlot");        for (i=0; i<nTheta; i++)        {            x[i] = cos(theta[i]);            y[i] = 8.0*x[i];        }        plP.lineStyle = SC_LINE_STYLE_SOLID; plP.markerStyle = SC_POINT_STYLE_EMPTY;        plP.lineWidth = 1.0; SCColorFromName("blue", &plP.lineColor); plP.yAxis = 0;        SCMakePlotNow("twoAxisPlot", theta, x, nTheta, &plP, 0);        SCColorFromName("red", &plP.lineColor); plP.yAxis = 1;        SCMakePlotNow("twoAxisPlot", theta, y, nTheta, &plP, 0);    }    if (!strcmp(buttonName, "plotFit"))    {        SCClearMakeNowPlots("fitPlot");        for (i=0; i<nTheta; i++)            xNoise[i] = cos(theta[i]) + 0.1*RandGauss();        plP.lineStyle = SC_LINE_STYLE_EMPTY; plP.markerStyle = SC_POINT_STYLE_CIRCLE;         plP.markerSize = 4; SCColorFromName("blue", &plP.markerColor);         SCColorFromName("blue", &plP.lineColor);        SCMakePlotNow("fitPlot", theta, xNoise, nTheta, &plP, 0);        SCColorFromName("red", &fpP.lineColor);        fpP.lineWidth = 4.0;        SCMakeFitNow("fitPlot", theta, xNoise, nTheta, &fpP, 0,                      "a*cos(b*x)", 2, "a", 0.8, "b", 1.2);    }    if (!strcmp(buttonName, "plotSmooth"))    {        SCClearMakeNowPlots("smoothPlot");        for (i=0; i<nTheta; i++)            xNoise[i] = cos(theta[i]) + 0.1*RandGauss();        plP.lineStyle = SC_LINE_STYLE_EMPTY; plP.markerStyle = SC_POINT_STYLE_CIRCLE;         plP.markerSize = 4; SCColorFromName("blue", &plP.markerColor);        SCColorFromName("blue", &plP.lineColor);        SCMakePlotNow("smoothPlot", theta, xNoise, nTheta, &plP, 0);        smP.smoothness = 0.3; smP.lineWidth = 3.0; smP.lineStyle = SC_LINE_STYLE_SOLID;         SCColorFromName("red", &smP.lineColor);        SCMakeSmoothNow("smoothPlot", theta, xNoise, nTheta, &smP, 0);    }    if (!strcmp(buttonName, "plotBar"))    {        SCClearMakeNowPlots("barPlot");        SCColorFromName("magenta", &bpP.barColor);        SCMakeBarNow("barPlot", xBar, nBar, &bpP, 0);        SCColorFromName("cyan", &bpP.barColor);    }    if (!strcmp(buttonName, "plotLines"))    {        mlP.lineWidth = 5.0;        mlP.linesAreVertical = true;        SCColorFromName("red", &mlP.lineColor);        mlP.fixedLowerLimit = -1.0;	        mlP.fixedUpperLimit = 3.0;        mlP.lineStyle = SC_LINE_STYLE_COARSE_DASH;        SCMakeMultiLinesNow("offsetPlot", xLines, NULL, NULL, NULL, nLines, &mlP, 0);    }    if (!strcmp(buttonName, "plotScatter"))    {        SCClearMakeNowPlots("scatterPlot");        scP.markerSize = 8;        SCColorFromName("yellow", &scP.borderColor);        scP.borderSize = 3;        SCColorFromName("red", &scP.markerColor);        scP.colorType = SC_SCATTER_PLOT_COLOR_BORDER;        scP.scaleType = SC_SCATTER_PLOT_SCALE_BY_DIAMETER;//_BY_AREA;        SCMakeScatterNow("scatterPlot", xCenter, yCenter, xSize,                          NULL, nCircle, NULL, &scP, 0);    }    if (!strcmp(buttonName, "plotRange"))    {        index = 0;        for (i=0; i<nMatrix; i++)        {            for (j=0; j<nMatrix; j++)            {                J[i][j] = 1.0 - J[i][j];                JVec[index] = J[i][j];                index++;            }        }        SCMakeRangeNow("rangePlot", matrixXMin, matrixXMax, matrixYMin, matrixYMax,                        JVec, nMatrix*nMatrix, "plotColors", &rpP, 0);    }    if (!strcmp(buttonName, "file"))    {        int			i;	        for (i=0; i<10; i++)            vWrite[i] = i;        theFile = fopen("/Users/Abbott/Desktop/stuff.txt", "w");        for (i=0; i<10; i++)            fprintf(theFile, "%f\n", vWrite[i]);        fclose(theFile);        theFile = fopen("/Users/Abbott/Desktop/stuff.txt", "r");        for (i=0; i<10; i++)            fscanf(theFile, "%lf\n", &vRead[i]);        fclose(theFile);	        for (i=0; i<10; i++)            SCWriteLine("data", vRead[i]);        for (i=0; i<10; i++)        {            vWrite[i] = 2.0*i;            vRead[i] = 0.0;        }        theFile = fopen("/Users/Abbott/Desktop/stuff2.txt", "w");        fwrite(vWrite, 10*sizeof(double), 1, theFile);        fclose(theFile);        theFile = fopen("/Users/Abbott/Desktop/stuff2.txt", "r");        fread(vRead, 10*sizeof(double), 1, theFile);        fclose(theFile);        for (i=0; i<10; i++)            SCWriteLine("data", vRead[i]);    }    if (!strcmp(buttonName, "getData"))    {        double	*cData=NULL, *ht=NULL, *hct=NULL, **hxS=NULL;        double	**hcts=NULL, **hts=NULL;        int		nV=0, *nVs=NULL;	        SCCopyDataFromManagedColumn("cList", &cData, &nV);        SCWriteLineInt("last cell", cData[nV-1]);        SCWriteText("");        if (cData!=NULL)            free(cData);                 SCCopyDataFromHistoryWithIndex("t", historyCount-1, 1.0, &ht, &nV);        SCCopyDataFromHistoryWithIndex("ct", historyCount-1, 1.0, &hct, &nV);        plP.lineStyle = SC_LINE_STYLE_SOLID; plP.lineWidth = 1;        plP.markerStyle = SC_POINT_STYLE_EMPTY;         SCColorFromName("green", &plP.lineColor);        SCMakePlotNow("expressionPlot", ht, hct, nV, &plP, 0);        if (ht!=NULL)            free(ht);        if (hct!=NULL)            free(hct);                SCCopyStructuredDataFromHistories("t", historyCount-2, historyCount-1, 1.0, &hts, &nV);        SCCopyStructuredDataFromHistories("ct", historyCount-2, historyCount-1,1.0, &hcts, &nVs);        SCWriteLine("t1", hts[0][500]); SCWriteLine("t2", hts[1][500]);        SCWriteLine("ct1", hcts[0][500]); SCWriteLine("ct2", hcts[1][500]);        SCWriteText("");        if (hts!=NULL)            free(ht);        if (nVs!=NULL)            free(nVs);        if (hcts!=NULL)            free(hxS);									                SCCopyFlatDataFromHistories("t", historyCount-2, historyCount-1, 1.0, &ht, &nV);        SCCopyFlatDataFromHistories("ct", historyCount-2, historyCount-1, 1.0, &hct, &nV);        SCWriteLine("nValues", nV); SCWriteLine("hct", hct[nV-1]);        SCWriteText("");        if (ht!=NULL)            free(ht);        if (hct!=NULL)            free(hct);                SCCopyFlatDataFromHistories("t", historyCount-2, historyCount-1, 1.0, &ht, &nV);        SCCopyFlatDataFromHistoriesForColumns("xS", 0, 1, historyCount-2,                                               historyCount-1, 1.0, &hxS, &nVs);        SCWriteLine("hxS", hxS[1][nVs[1]-1]);        if (ht!=NULL)            free(ht);        if (nVs!=NULL)            free(nVs);        if (hxS!=NULL)            free(hxS);    }}/******* PARAMETERS *******/void AddControllableParameters(void * modelData){    SCAddControllableParameter("T", 0.0, 100.0, 10.0);}/******* PARAMETER ACTION *******/void ParameterAction(const char * parameterName, double parameterValue, void * modelData){    if (!strcmp(parameterName, "T"))        w = 2.0*pi/parameterValue;}/******* RUN *******/void RunModelOneStep(void * modelData, bool isPlotIter){    simTime += DT; runTime += DT; plotTime += DT;    double c;    int	i, j, index;        ct = cos(1.113*w*simTime);    st = sin(1.113*w*simTime);    xBall = cos(0.0013*w*simTime) + 3.0;    yBall = sin(0.0013*w*simTime);    for (i=0; i<nBar; i++)        xBar[i] = cos(0.001*w*simTime + 2.0*pi*(double) i/(double) nBar);    xS[0] = ct;    xS[1] = st;    for (i=0; i<nCell; i++)    {        if (Randx()<0.01)        {            c = 0.5 + (double) i;            SCAddDataToManagedColumn("tList", &plotTime, 1);            SCAddDataToManagedColumn("cList", &c, 1);        }    }    index = 0;    for (i=0; i<nMatrix; i++)    {        for (j=0; j<nMatrix; j++)        {            J[i][j] = Randx();            JVec[index] = J[i][j];            index++;        }    }    //usleep(5000);}/******* INITIALIZATIONS *******/void InitForPlotDuration(void * modelData){    plotTime = -DT;}void InitForRun(void* modelData){    runTime = -DT;    SCClearMakeNowPlots("offsetPlot");}/******* CLEAN UP *******/void CleanupAfterPlotDuration(void * modelData){    historyCount++;    if (SCGetButtonValue("going"))        SCStopRunning();}void CleanupAfterRun(void * modelData){    }void CleanupModel(void * modelData){    }/******* PROCEDURES *******/